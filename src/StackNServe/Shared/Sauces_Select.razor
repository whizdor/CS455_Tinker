<style>
    @@import url('https://fonts.googleapis.com/css2?family=Cedarville+Cursive&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
    .SaucesSelect
    {
        display: flex;
        flex-direction: row;
    }
    .SaucesToggleButton
    {
        background-color: #FFCBA2;
        width: 120px;
        height: 120px;
        border-radius: 50%;
        border: 1px solid #E38282;
    }

    .SaucesToggleButton:hover
    {
        background-color: rgb(208, 168, 221);
        transition: 0.5s;
    }

    .Sauces_Select_Image 
    {
        padding-left: 10px;
        padding-top: 12px;
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    .ClickExpandMenu
    {
        z-index: 1000;
        background-color: #fce1cc;
        position: absolute;
        align-items: center;
        margin-left: 10rem;
        margin-top: 1.5rem;
        padding: 5px;
        padding-left: 25px;
        border-radius: 15px;
        list-style-type: none;
        display: flex;
        flex-direction: row;
        animation: 0.5s;
    }

    .ClickExpandMenu li
    {
        z-index: 1000;
        margin-right: 10px;
    }

    .ImageSmallCircular
    {
        width: 60px;
        height: 60px;
        border-radius: 50%; 
        object-fit: cover; 
    }
    .HoverInfo 
    {
        z-index: 2000;
        text-align: center;
        font-family:"Cedarville Cursive", cursive;
        position: absolute;
        background-color: white;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        top: 70px;
        left: 0;
        width: 200px;
    }
    .HoverInfoHeading
    {
        color:#E36565;
    }
    .HoverInfoPrice
    {
        color:#E36565;
    }
</style>

@using StackNServe.Services
@using StackNServe.Models

@inject GlobalStringListService StringListService
@inject SelectionButtonService SelectionButtonService

<div class = "SaucesSelect">
    <button @onclick="ToggleMenu" class = "SaucesToggleButton">
        <div class="SaucesIconContainer">
            <img src="images/Sauces_Select.png" alt="Sauces Select" class="Sauces_Select_Image" />
        </div>
    </button>
    @if (isExpanded)
    {
        // set the z dimesion of the div to 1000 to make it appear on top of the other elements
        <ul class = "ClickExpandMenu">
            @foreach (var item in SaucesImages.Select((Sauces, index) => new { Sauces, index }))
            {
                <li @onmouseenter="() => Display_Info(item.Sauces)" @onmouseleave="ClearHoverInfo" @onclick="() => AddToBurger(item.Sauces)">
                    <img src="@item.Sauces" class="ImageSmallCircular" alt="Bun" />
                    @if (currentHoverInfo != null && currentHoverPatty == item.Sauces)
                    {
                        <div class="HoverInfo" style="margin-left:@($"{item.index * 4}vw")">
                            <h5 class="HoverInfoHeading">@currentHoverInfo.Name</h5>
                            <p>@currentHoverInfo.Description</p>
                            <p class="HoverInfoPrice">Price: Rs. @currentHoverInfo.Price.ToString("F2")</p>
                        </div>
                    }
                </li>
            }
            <li></li>
        </ul>
        
    }
</div>


@code
{  
    List<string> SaucesImages = new List<string>
        {
            "images/Sauces/Aioli.png",
            "images/Sauces/BBQSauce.png",
            "images/Sauces/HotSauce.png",
            "images/Sauces/Ketchup.png",
            "images/Sauces/Mayo.png",
            "images/Sauces/Mustard.png",
            "images/Sauces/Ranch.png",
        };

    private bool isExpanded = false;
    private SaucesInfo currentHoverInfo;
    private string currentHoverPatty;
    private void Display_Info(string Sauces)
    {
        currentHoverPatty = Sauces;
        if (Sauces == "images/Sauces/Aioli.png")
        {
            Aioli temp_object = new Aioli();
            currentHoverInfo = new SaucesInfo("Aioli", temp_object.Description, temp_object.Price);
        }
        else if (Sauces == "images/Sauces/BBQSauce.png")
        {
            BBQSauce temp_object = new BBQSauce();
            currentHoverInfo = new SaucesInfo("BBQ Sauce", temp_object.Description, temp_object.Price);
        }
        else if (Sauces == "images/Sauces/HotSauce.png")
        {
            HotSauce temp_object = new HotSauce();
            currentHoverInfo = new SaucesInfo("Hot Sauce", temp_object.Description, temp_object.Price);
        }
        else if (Sauces == "images/Sauces/Ketchup.png")
        {
            Ketchup temp_object = new Ketchup();
            currentHoverInfo = new SaucesInfo("Ketchup", temp_object.Description, temp_object.Price);
        }
        else if (Sauces == "images/Sauces/Mayo.png")
        {
            Mayo temp_object = new Mayo();
            currentHoverInfo = new SaucesInfo("Mayo", temp_object.Description, temp_object.Price);
        }
        else if (Sauces == "images/Sauces/Mustard.png")
        {
            Mustard temp_object = new Mustard();
            currentHoverInfo = new SaucesInfo("Mustard", temp_object.Description, temp_object.Price);
        }
        else if (Sauces == "images/Sauces/Ranch.png")
        {
            Ranch temp_object = new Ranch();
            currentHoverInfo = new SaucesInfo("Ranch", temp_object.Description, temp_object.Price);
        }
    }
    private void ClearHoverInfo()
    {
        currentHoverInfo = null;
        currentHoverPatty = null;
    }
    [Parameter]
    public EventCallback<bool> OnStateChanged { get; set; }
        
    private async Task ToggleMenu()
    {
        if(isExpanded) {
            isExpanded = false;
        }
        else {
            isExpanded = true;
            SelectionButtonService.BunSelectVar = false;
            SelectionButtonService.PattySelectVar = false;
            SelectionButtonService.SaucesSelectVar = true;
            SelectionButtonService.ToppingSelectVar = false;
            SelectionButtonService.NotifyStateChanged();
        }
        await OnStateChanged.InvokeAsync(isExpanded);
    }
    private class SaucesInfo
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }

        public SaucesInfo(string name, string description, decimal price)
        {
            Name = name;
            Description = description;
            Price = price;
        }
    }


    private void AddItem(string newItem)
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            StringListService.AddString(newItem);
            newItem = "";
        }
    }

    public void AddToBurger(string sauces)
    {
        Console.WriteLine("Adding Sauce to Burger");
        // Add Patty to Burger
        currentHoverPatty = sauces;
        if(sauces == "images/Sauces/Aioli.png") AddItem("Aioli");
        else if(sauces == "images/Sauces/BBQSauce.png") AddItem("BBQ Sauce");
        else if(sauces == "images/Sauces/HotSauce.png") AddItem("Hot Sauce");
        else if(sauces == "images/Sauces/Ketchup.png") AddItem("Ketchup");
        else if(sauces == "images/Sauces/Mayo.png") AddItem("Mayonnaise");
        else if(sauces == "images/Sauces/Mustard.png") AddItem("Mustard");
        else if(sauces == "images/Sauces/Ranch.png") AddItem("Ranch");
    }

    private System.Threading.Timer _timer;

    protected override void OnInitialized()
    {
        _timer = new System.Threading.Timer(CheckSaucesSelectVar, null, 0, 100); // Check every 100ms
    }

    private void CheckSaucesSelectVar(object state)
    {
        if (!SelectionButtonService.SaucesSelectVar && isExpanded)
        {
            InvokeAsync(async () =>
            {
                await ToggleMenu();
                StateHasChanged();
            });
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}