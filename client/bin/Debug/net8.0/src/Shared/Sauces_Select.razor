@namespace StackNServe.Shared

@using StackNServe.Services

@using System.Text.Json;
@inject HttpClient Http
@inject GlobalStringListService StringListService
@inject SelectionButtonService SelectionButtonService

<div class = "SaucesSelect">
    <button @onclick="ToggleMenu" class = "SaucesToggleButton">
        <div class="SaucesIconContainer">
            <img src="images/Sauces_Select.png" alt="Sauces Select" class="Sauces_Select_Image" />
        </div>
    </button>
    @if (isExpanded)
    {
        // set the z dimesion of the div to 1000 to make it appear on top of the other elements
        <ul class = "ClickExpandMenu">
            @foreach (var item in SaucesImages.Select((Sauces, index) => new { Sauces, index }))
            {
                <li @onmouseenter="() => Display_Info(item.Sauces)" @onmouseleave="ClearHoverInfo" @onclick="() => AddToBurger(item.Sauces)">
                    <img src="@item.Sauces" class="ImageSmallCircular" alt="Bun" />
                    @if (currentHoverInfo != null && currentHoverSauces == item.Sauces)
                    {
                        <div class="HoverInfo" style="margin-left:@($"{item.index * 4}vw")">
                            <h5 class="HoverInfoHeading">@currentHoverInfo.Name</h5>
                            <p>@currentHoverInfo.Description</p>
                            <p class="HoverInfoPrice">Price: Rs. @currentHoverInfo.Price.ToString("F2")</p>
                        </div>
                    }
                </li>
            }
            <li></li>
        </ul>
        
    }
</div>

<link href="src/Shared/Sauces_Select.razor.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Cedarville+Cursive&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">

@code
{  
    List<string> SaucesImages = new List<string>
        {
            "images/Sauces/Aioli.png",
            "images/Sauces/BBQSauce.png",
            "images/Sauces/HotSauce.png",
            "images/Sauces/Ketchup.png",
            "images/Sauces/Mayo.png",
            "images/Sauces/Mustard.png",
            "images/Sauces/Ranch.png",
        };

    public bool isExpanded = false;
    public SaucesInfo currentHoverInfo;
    public string currentHoverSauces;
    public async Task Display_Info(string sauce)
    {
        currentHoverSauces = sauce;

        string sauceName = sauce switch
        {
            "images/Sauces/Aioli.png" => "Aioli",
            "images/Sauces/BBQSauce.png" => "BBQ Sauce",
            "images/Sauces/HotSauce.png" => "Hot Sauce",
            "images/Sauces/Ketchup.png" => "Ketchup",
            "images/Sauces/Mayo.png" => "Mayo",
            "images/Sauces/Mustard.png" => "Mustard",
            "images/Sauces/Ranch.png" => "Ranch",
            _ => null
        };

        if (!string.IsNullOrEmpty(sauceName))
        {
            try
            {
                string url = $"burger/description?type=sauces&name={Uri.EscapeDataString(sauceName)}";
                var response = await Http.GetAsync(url);
                var content = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    currentHoverInfo = JsonSerializer.Deserialize<SaucesInfo>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                }
                else
                {
                    currentHoverInfo = new SaucesInfo(sauceName, $"Error: {response.StatusCode} - {content}", 0);
                }
            }
            catch (Exception ex)
            {
                currentHoverInfo = new SaucesInfo(sauceName, $"Exception: {ex.Message}", 0);
            }

            StateHasChanged();
        }
        else
        {
            currentHoverInfo = new SaucesInfo("Unknown Sauce", "Description not available.", 0);
            StateHasChanged();
        }
    }
    public void ClearHoverInfo()
    {
        currentHoverInfo = null;
        currentHoverSauces = null;
    }
    [Parameter]
    public EventCallback<bool> OnStateChanged { get; set; }
        
    public async Task ToggleMenu()
    {
        if(isExpanded) {
            isExpanded = false;
        }
        else {
            isExpanded = true;
            SelectionButtonService.BunSelectVar = false;
            SelectionButtonService.PattySelectVar = false;
            SelectionButtonService.SaucesSelectVar = true;
            SelectionButtonService.ToppingSelectVar = false;
            SelectionButtonService.NotifyStateChanged();
        }
        await OnStateChanged.InvokeAsync(isExpanded);
    }
    public class SaucesInfo
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }

        public SaucesInfo(string name, string description, decimal price)
        {
            Name = name;
            Description = description;
            Price = price;
        }
    }


    public void AddItem(string newItem)
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            StringListService.AddString(newItem);
            newItem = "";
        }
    }

    public void AddToBurger(string sauces)
    {
        Console.WriteLine("Adding Sauce to Burger");
        // Add Patty to Burger
        currentHoverSauces = sauces;
        if(sauces == "images/Sauces/Aioli.png") AddItem("Aioli");
        else if(sauces == "images/Sauces/BBQSauce.png") AddItem("BBQ Sauce");
        else if(sauces == "images/Sauces/HotSauce.png") AddItem("Hot Sauce");
        else if(sauces == "images/Sauces/Ketchup.png") AddItem("Ketchup");
        else if(sauces == "images/Sauces/Mayo.png") AddItem("Mayo");
        else if(sauces == "images/Sauces/Mustard.png") AddItem("Mustard");
        else if(sauces == "images/Sauces/Ranch.png") AddItem("Ranch");
    }

    public System.Threading.Timer _timer;

    protected override void OnInitialized()
    {
        _timer = new System.Threading.Timer(CheckSaucesSelectVar, null, 0, 100); // Check every 100ms
    }

    public void CheckSaucesSelectVar(object state)
    {
        if (!SelectionButtonService.SaucesSelectVar && isExpanded)
        {
            InvokeAsync(async () =>
            {
                await ToggleMenu();
                StateHasChanged();
            });
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}