name: Deploy to GitHub Pages

on: [push]

jobs:
  build:
    name: SonarCloud
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "zulu" # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      # Installing the correct version of .NET SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner



      # SonarCloud analysis begins
      - name: Begin SonarCloud Analysis
        run: .\.sonar\scanner\dotnet-sonarscanner begin /k:"whizdor_CS455_Tinker" /o:"whizdor" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="tests/StackNServe.Tests/TestResults/coverage.cobertura.xml"

      # Build the solution after starting SonarCloud analysis
      - name: Build the solution
        run: dotnet build src/StackNServe/StackNServe.csproj --configuration Debug

      # Build the test project explicitly to generate test DLLs
      - name: Build the test project
        run: dotnet build tests/StackNServe.Tests/StackNServe.Tests.csproj --configuration Debug

      # Run tests and collect coverage
      - name: Run tests and collect coverage
        run: |
          dotnet test tests/StackNServe.Tests/StackNServe.Tests.csproj --configuration Debug --framework net8.0 --collect:"XPlat Code Coverage" --logger "trx;LogFileName=test_results.trx" --verbosity normal
      
      # Ensure tests ran successfully (using PowerShell syntax)
      - name: Ensure tests ran successfully
        shell: powershell
        run: |
          if (-Not (Test-Path "tests/StackNServe.Tests/TestResults/test_results.trx")) {
            Write-Host "Test results file not found!"
            exit 1
          }
          # Load the .trx file as XML and check for failed tests
          [xml]$trx = Get-Content "tests/StackNServe.Tests/TestResults/test_results.trx"
          $failedTests = $trx.TestRun.Results.UnitTestResult | Where-Object { $_.outcome -eq 'Failed' }
          if ($failedTests.Count -gt 0) {
            Write-Host "Some tests failed!"
            exit 1
          } else {
            Write-Host "All tests passed!"
          }
      
      # Find the coverage.cobertura.xml file and copy it to a predictable location
      - name: Locate and move coverage file
        shell: powershell
        run: |
          $coverageFile = Get-ChildItem -Path "tests/StackNServe.Tests/TestResults" -Recurse -Filter "coverage.cobertura.xml" | Select-Object -First 1
          if ($coverageFile) {
            Copy-Item $coverageFile.FullName "tests/StackNServe.Tests/TestResults/coverage.cobertura.xml"
            Write-Host "Coverage file found and moved."
          } else {
            Write-Host "Coverage file not found!"
            exit 1
          }
     
      # Check for coverage report (using PowerShell syntax)
      - name: Check for coverage report
        shell: powershell
        run: |
          if (-Not (Test-Path "tests/StackNServe.Tests/TestResults/coverage.cobertura.xml")) {
            Write-Host "Coverage report not found!"
            exit 1
          } else {
            Write-Host "Coverage report found!"
          }
      
      # Finalize the SonarCloud analysis after building the project
      - name: End SonarCloud Analysis
        run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      # Fetch detailed SonarCloud results and output in the logs
      - name: Fetch and display detailed SonarCloud analysis results
        if: always()
        shell: bash
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Fetching detailed analysis results..."
          curl -u $SONAR_TOKEN: "https://sonarcloud.io/api/issues/search?componentKeys=whizdor_CS455_Tinker" > sonarcloud-results.json
          echo "Analysis results:"
          cat sonarcloud-results.json | jq '.issues[] | {key, component, severity, message, line}'
      # Upload the SonarCloud results JSON as an artifact
      - name: Upload SonarCloud results artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sonarcloud-results
          path: sonarcloud-results.json
      - name: Check SonarCloud Quality Gate
        id: quality-gate
        shell: bash
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          SONAR_STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=whizdor_CS455_Tinker" | jq -r '.projectStatus.status')
          if [ "$SONAR_STATUS" != "OK" ]; then
            echo "Quality gate failed: $SONAR_STATUS"
            exit 1
          else
            echo "Quality gate passed!"
          fi

  deploy-to-github-pages:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      # Checkout the code from the master branch
      - uses: actions/checkout@v3

      # Setup .NET Core SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.107

      # Publish the project
      - name: Publish .NET Core Project
        run: dotnet publish src/StackNServe/StackNServe.csproj -c Release -o release --nologo

      # Verify that index.html exists after the publish
      - name: Verify index.html exists
        run: |
          if [ ! -f release/wwwroot/index.html ]; then
            echo "Error: index.html not found!"
            exit 1
          fi

      # Change base tag in index.html to point to the correct subdirectory (StackNServe)
      - name: Change base-tag in index.html
        run: sed -i 's/<base href="\/" \/>/<base href="\/CS455_Tinker\/" \/>/g' release/wwwroot/index.html

      # Copy index.html to 404.html for GitHub Pages fallback routing
      - name: Copy index.html to 404.html
        run: cp release/wwwroot/index.html release/wwwroot/404.html

      # Add a .nojekyll file to prevent Jekyll processing
      - name: Add .nojekyll file
        run: touch release/wwwroot/.nojekyll

      # Deploy the wwwroot folder to the gh-pages branch
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: release/wwwroot
